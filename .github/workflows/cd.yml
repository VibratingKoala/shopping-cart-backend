name: CD - Deploy to Production

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: shopping-cart-cluster
  ECS_SERVICE: shopping-cart-service
  CONTAINER_NAME: shopping-cart-api

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.service-url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.6.0"
        terraform_wrapper: false

    - name: Terraform Init
      working-directory: ./infra/terraform
      run: terraform init
      env:
        TF_VAR_environment: ${{ github.event.inputs.environment || 'production' }}

    - name: Terraform Plan
      working-directory: ./infra/terraform
      run: terraform plan -out=tfplan
      env:
        TF_VAR_environment: ${{ github.event.inputs.environment || 'production' }}
        TF_VAR_image_tag: ${{ github.sha }}
        TF_VAR_aws_region: ${{ env.AWS_REGION }}

    - name: Terraform Apply
      working-directory: ./infra/terraform
      run: terraform apply -auto-approve tfplan
      env:
        TF_VAR_environment: ${{ github.event.inputs.environment || 'production' }}

    - name: Get container image URI
      id: image-uri
      run: |
        IMAGE_URI="ghcr.io/${{ github.repository }}:${{ github.sha }}"
        echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT

    - name: Update ECS service
      id: deploy
      run: |
        # Get current task definition
        TASK_DEFINITION=$(aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_SERVICE }} \
          --query 'taskDefinition' \
          --output json)

        # Update image URI in task definition
        NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ steps.image-uri.outputs.image-uri }}" \
          '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')

        # Register new task definition
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json "$NEW_TASK_DEFINITION" \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)

        # Update service with new task definition
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition $NEW_TASK_DEF_ARN

        # Wait for deployment to complete
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }}

        # Get service URL (this would need to be implemented based on your load balancer setup)
        SERVICE_URL="https://api.shopping-cart.example.com"
        echo "service-url=$SERVICE_URL" >> $GITHUB_OUTPUT

    - name: Verify deployment
      run: |
        # Wait a moment for the service to be fully ready
        sleep 30
        
        # Basic health check
        curl -f ${{ steps.deploy.outputs.service-url }}/health || exit 1
        
        echo "âœ… Deployment verification passed"

    - name: Rollback on failure
      if: failure()
      run: |
        echo "ðŸš¨ Deployment failed, initiating rollback..."
        
        # Get previous task definition
        PREVIOUS_TASK_DEF=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].deployments[?status==`PRIMARY`][0].taskDefinition' \
          --output text)
        
        # Rollback service
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition $PREVIOUS_TASK_DEF
        
        echo "ðŸ”„ Rollback initiated"

    # Slack notifications (commented out for demo - would be enabled in production)
    # - name: Notify deployment status
    #   if: always()
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ job.status }}
    #     channel: '#deployments'
    #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    #     fields: repo,message,commit,author,action,eventName,ref,workflow
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}